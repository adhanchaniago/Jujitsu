<?php
defined('BASEPATH') OR exit('No direct script access allowed');

class Login_C extends CI_Controller {

  public function __construct(){
    parent::__construct();
    $this->load->model('Login_M');
    $this->load->library('Check_login');
    
  }

  public function index(){
    $data['title'] = 'Halaman Login - Jujitsu UPN Veteran Jakarta';
    $data['class'] = 'login-page';
    $data['captcha'] = $this->captcha1();
    $data['url'] =  $this->uri->uri_string();
    $this->template->display('content/login',$data);
  }

  public function login_member(){
      $email = $this->input->post('email');
      $password = $this->input->post('password');
      $captcha = $this->input->post('captcha');
      $date = date("Y-m-d H:i:s", strtotime('+7 hours'));
       
      $expiration = time() - 600; // Two hour limit
$this->db->where('captcha_time < ', $expiration)
        ->delete('captcha');

// Then see if a captcha exists:
$sql = 'SELECT COUNT(*) AS count FROM captcha WHERE word = ? AND ip_address = ? AND captcha_time > ?';
$binds = array($captcha, $this->input->ip_address(), $expiration);
$query = $this->db->query($sql, $binds);
$row = $query->row();

if ($row->count == 0)
{
        echo 'captcha';
}  else {
       
        $where = array(
            'email' => $email,
            'password' => md5($password)
            );
        $data = array('login_time' => $date);
        $cek = $this->Login_M->cek_login('login',$where)->num_rows();
        
        if($cek > 0){
        $update = $this->Login_M->update($email,'login',$data);
        $data = $this->Login_M->cek_login('login',$where)->result_array();
        foreach($data as $row){
        $verifikasi = $row['verifikasi'];
        $status = $row['status'];
        }
        if($verifikasi=='None'){
          echo 'Verifikasi';
          } else if($status=='None'){
             echo 'Inactive';
          } else {
            $data_session = array(
                'email' => $email,
                'login_member' => "true"
                );
 
            $this->session->set_userdata($data_session);
 
            echo 'ok';
        }
        }else{
           echo "Error";
        }
}
      
    }

    public function logout(){
        $this->session->sess_destroy();
        redirect(base_url('Home'));
    }
    
    public function captcha(){
        $vals = array(
       // 'word'          => 'Random word',
        'img_path'      => 'captcha/',
        'img_url'       => base_url('captcha'),
        'font_path'     => base_url('captcha/roboto/Roboto-Bold.ttf'),
        'img_width'     => '200',
        'img_height'    => 30,
        'expiration'    => 600,
        'word_length'   => 5,
        'font_size'     => 8,
        'img_id'        => 'Imageid',
        'pool'          => '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',

        // White background and border, black text and red grid
        'colors'        => array(
                'background' => array(255, 255, 255),
                'border' => array(255, 40, 40),
                'text' => array(0, 0, 0),
                'grid' => array(255, 255, 255)
        )
);

$cap = create_captcha($vals);
return $cap['image'];
//echo $cap['image'];
//echo 'a';
    }
    
    public function captcha1(){
        $this->load->helper('captcha');
        $vals = array(
       // 'word'          => 'Random word',
        'img_path'      => 'captcha/',
        'img_url'       => base_url('captcha'),
        'font_path'     => base_url('captcha/roboto/Roboto-Bold.ttf'),
        'img_width'     => '200',
        'img_height'    => 30,
        'expiration'    => 600,
        'word_length'   => 5,
        'font_size'     => 8,
        'img_id'        => 'Imageid',
        'pool'          => '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',

        // White background and border, black text and red grid
        'colors'        => array(
                'background' => array(255, 255, 255),
                'border' => array(255, 40, 40),
                'text' => array(0, 0, 0),
                'grid' => array(255, 255, 255)
        )
);

$this->db->where('ip_address = ', $this->input->ip_address())
        ->delete('captcha');

$cap = create_captcha($vals);
$data = array(
        'captcha_time'  => $cap['time'],
        'ip_address'    => $this->input->ip_address(),
        'word'          => $cap['word']
);

$query = $this->db->insert_string('captcha', $data);
$this->db->query($query);

//echo 'Submit the word you see below:';
return $cap['image'];
//echo '<input type="text" name="captcha" value="" />';
    }
}